[0m[1mdata.terraform_remote_state.vpc: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_kms_alias.ebs: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role: Read complete after 0s [id=3552664922][0m
[0m[1mdata.terraform_remote_state.vpc: Read complete after 0s[0m
[0m[1mmodule.eks.data.aws_kms_alias.ebs: Read complete after 0s [id=arn:aws:kms:ap-northeast-2:066346343248:alias/aws/ebs][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.eks.data.aws_eks_cluster_auth.eks_auth[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster_auth" "eks_auth" {
      [32m+[0m[0m id    = (known after apply)
      [32m+[0m[0m name  = "aws_eks_cluster.eks_cluster"
      [32m+[0m[0m token = (sensitive value)
    }

[1m  # module.eks.data.aws_security_group.cluster_sg[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_security_group" "cluster_sg" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "aws:eks:cluster-name" = "tmcdapne2-nhwy"
        }
      [32m+[0m[0m vpc_id      = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.oidc[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "oidc" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_autoscaling_group_tag.aws_node_termination_handler_asg[0][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_group_tag" "aws_node_termination_handler_asg" {
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m id                     = (known after apply)

      [32m+[0m[0m tag {
          [32m+[0m[0m key                 = "aws-node-termination-handler/managed"
          [32m+[0m[0m propagate_at_launch = true
          [32m+[0m[0m value               = "true"
        }
    }

[1m  # module.eks.aws_autoscaling_group_tag.aws_node_termination_handler_asg[1][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_group_tag" "aws_node_termination_handler_asg" {
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m id                     = (known after apply)

      [32m+[0m[0m tag {
          [32m+[0m[0m key                 = "aws-node-termination-handler/managed"
          [32m+[0m[0m propagate_at_launch = true
          [32m+[0m[0m value               = "true"
        }
    }

[1m  # module.eks.aws_autoscaling_lifecycle_hook.aws_node_termination_handler_asg[0][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_lifecycle_hook" "aws_node_termination_handler_asg" {
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m default_result         = "CONTINUE"
      [32m+[0m[0m heartbeat_timeout      = 300
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m lifecycle_transition   = "autoscaling:EC2_INSTANCE_TERMINATING"
      [32m+[0m[0m name                   = (known after apply)
    }

[1m  # module.eks.aws_autoscaling_lifecycle_hook.aws_node_termination_handler_asg[1][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_lifecycle_hook" "aws_node_termination_handler_asg" {
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m default_result         = "CONTINUE"
      [32m+[0m[0m heartbeat_timeout      = 300
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m lifecycle_transition   = "autoscaling:EC2_INSTANCE_TERMINATING"
      [32m+[0m[0m name                   = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_event_rule.aws_node_termination_handler["tmcdapne2-nhwy-aws-node-termination-handler-health-check"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "aws_node_termination_handler" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail      = {
                  [32m+[0m[0m eventTypeCategory = [
                      [32m+[0m[0m "scheduledChange",
                    ]
                  [32m+[0m[0m service           = [
                      [32m+[0m[0m "EC2",
                    ]
                }
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "AWS Health Event",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.health",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "tmcdapne2-nhwy-aws-node-termination-handler-health-check"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m tags_all       = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_event_rule.aws_node_termination_handler["tmcdapne2-nhwy-aws-node-termination-handler-spot-terminate"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "aws_node_termination_handler" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Spot Instance Interruption Warning",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "tmcdapne2-nhwy-aws-node-termination-handler-spot-terminate"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m tags_all       = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_event_target.aws_node_termination_handler["tmcdapne2-nhwy-aws-node-termination-handler-health-check"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "aws_node_termination_handler" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "tmcdapne2-nhwy-aws-node-termination-handler-health-check"
      [32m+[0m[0m target_id      = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_event_target.aws_node_termination_handler["tmcdapne2-nhwy-aws-node-termination-handler-spot-terminate"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "aws_node_termination_handler" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "tmcdapne2-nhwy-aws-node-termination-handler-spot-terminate"
      [32m+[0m[0m target_id      = (known after apply)
    }

[1m  # module.eks.aws_ec2_tag.karpenter_cluster_sg_tag[0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "karpenter_cluster_sg_tag" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "karpenter.sh/discovery"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "tmcdapne2-nhwy"
    }

[1m  # module.eks.aws_ec2_tag.karpenter_private_subnet_tag["subnet-00954dff2b638bdd8"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "karpenter_private_subnet_tag" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "karpenter.sh/discovery"
      [32m+[0m[0m resource_id = "subnet-00954dff2b638bdd8"
      [32m+[0m[0m value       = "tmcdapne2-nhwy"
    }

[1m  # module.eks.aws_ec2_tag.karpenter_private_subnet_tag["subnet-08d60c5582e7bab2c"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "karpenter_private_subnet_tag" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "karpenter.sh/discovery"
      [32m+[0m[0m resource_id = "subnet-08d60c5582e7bab2c"
      [32m+[0m[0m value       = "tmcdapne2-nhwy"
    }

[1m  # module.eks.aws_eks_addon.coredns[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "coredns" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = "v1.10.1-eksbuild.4"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "tmcdapne2-nhwy"
      [32m+[0m[0m configuration_values        = jsonencode(
            {
              [32m+[0m[0m nodeSelector = {
                  [32m+[0m[0m capacity_type = "cpu_on_demand"
                }
            }
        )
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m tags_all                    = (known after apply)
    }

[1m  # module.eks.aws_eks_addon.ebs_csi[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "ebs_csi" {
      [32m+[0m[0m addon_name                  = "aws-ebs-csi-driver"
      [32m+[0m[0m addon_version               = "v1.23.0-eksbuild.1"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "tmcdapne2-nhwy"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m tags_all                    = (known after apply)
    }

[1m  # module.eks.aws_eks_addon.kube_proxy[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "kube_proxy" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = "v1.28.1-eksbuild.1"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "tmcdapne2-nhwy"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m tags_all                    = (known after apply)
    }

[1m  # module.eks.aws_eks_addon.vpc_cni[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "vpc_cni" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = "v1.15.1-eksbuild.1"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "tmcdapne2-nhwy"
      [32m+[0m[0m configuration_values        = jsonencode(
            {
              [32m+[0m[0m enableNetworkPolicy = "true"
            }
        )
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m service_account_role_arn    = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
    }

[1m  # module.eks.aws_eks_cluster.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks_cluster" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "tmcdapne2-nhwy"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "Name"       = "tmcdapne2-nhwy"
          [32m+[0m[0m "account"    = "id"
          [32m+[0m[0m "aws_region" = "ap-northeast-2"
          [32m+[0m[0m "product"    = "tmc"
          [32m+[0m[0m "shard_id"   = "tmcdapne2"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "Name"       = "tmcdapne2-nhwy"
          [32m+[0m[0m "account"    = "id"
          [32m+[0m[0m "aws_region" = "ap-northeast-2"
          [32m+[0m[0m "product"    = "tmc"
          [32m+[0m[0m "shard_id"   = "tmcdapne2"
        }
      [32m+[0m[0m version                       = "1.28"

      [32m+[0m[0m access_config (known after apply)

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = (known after apply)
          [32m+[0m[0m service_ipv4_cidr = "172.20.0.0/16"
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-00954dff2b638bdd8",
              [32m+[0m[0m "subnet-08d60c5582e7bab2c",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_eks_node_group.eks_node_group["ondemand_1_28_1-20230919"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "eks_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "tmcdapne2-nhwy"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.large",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "capacity_type" = "cpu_on_demand"
          [32m+[0m[0m "cpu_chip"      = "intel"
        }
      [32m+[0m[0m node_group_name        = "tmcdapne2-nhwy-ng-ondemand_1_28_1-20230919"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = "1.28.1-20230919"
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-00954dff2b638bdd8",
          [32m+[0m[0m "subnet-08d60c5582e7bab2c",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                 = "tmcdapne2-nhwy-ng-ondemand_1_28_1-20230919"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                 = "tmcdapne2-nhwy-ng-ondemand_1_28_1-20230919"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 2
          [32m+[0m[0m min_size     = 2
        }

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable = 1
        }
    }

[1m  # module.eks.aws_eks_node_group.eks_node_group["spot_1_28_1-20230919"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "eks_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "tmcdapne2-nhwy"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.large",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "capacity_type" = "spot"
          [32m+[0m[0m "cpu_chip"      = "intel"
        }
      [32m+[0m[0m node_group_name        = "tmcdapne2-nhwy-ng-spot_1_28_1-20230919"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = "1.28.1-20230919"
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-00954dff2b638bdd8",
          [32m+[0m[0m "subnet-08d60c5582e7bab2c",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                 = "tmcdapne2-nhwy-ng-spot_1_28_1-20230919"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                 = "tmcdapne2-nhwy-ng-spot_1_28_1-20230919"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 10
          [32m+[0m[0m min_size     = 2
        }

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable = 1
        }
    }

[1m  # module.eks.aws_fis_experiment_template.aws_node_termination_handler_fis[0m will be created
[0m  [32m+[0m[0m resource "aws_fis_experiment_template" "aws_node_termination_handler_fis" {
      [32m+[0m[0m description = "Spot Interrupt for testing node termination handler"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m role_arn    = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Name" = "aws_node_termination_handler_fis"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Name" = "aws_node_termination_handler_fis"
        }

      [32m+[0m[0m action {
          [32m+[0m[0m action_id   = "aws:ec2:send-spot-instance-interruptions"
          [32m+[0m[0m description = "Terminate spots"
          [32m+[0m[0m name        = "instance-terminate"
          [32m+[0m[0m start_after = []

          [32m+[0m[0m parameter {
              [32m+[0m[0m key   = "durationBeforeInterruption"
              [32m+[0m[0m value = "PT2M"
            }

          [32m+[0m[0m target {
              [32m+[0m[0m key   = "SpotInstances"
              [32m+[0m[0m value = "eks-spot-node-nth-handled"
            }
        }

      [32m+[0m[0m experiment_options (known after apply)

      [32m+[0m[0m stop_condition {
          [32m+[0m[0m source = "none"
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m target {
          [32m+[0m[0m name           = "eks-spot-node-nth-handled"
          [32m+[0m[0m resource_arns  = []
          [32m+[0m[0m resource_type  = "aws:ec2:spot-instance"
          [32m+[0m[0m selection_mode = "COUNT(1)"

          [32m+[0m[0m filter {
              [32m+[0m[0m path   = "State.Name"
              [32m+[0m[0m values = [
                  [32m+[0m[0m "running",
                ]
            }

          [32m+[0m[0m resource_tag {
              [32m+[0m[0m key   = "aws-node-termination-handler/managed"
              [32m+[0m[0m value = "true"
            }
          [32m+[0m[0m resource_tag {
              [32m+[0m[0m key   = "aws:eks:cluster-name"
              [32m+[0m[0m value = "tmcdapne2-nhwy"
            }
        }
    }

[1m  # module.eks.aws_iam_instance_profile.eks_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "eks_node_group" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "eks-tmcdapne2-nhwy-ng"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "eks-tmcdapne2-nhwy-ng"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # module.eks.aws_iam_openid_connect_provider.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "eks" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.alb_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "alb_controller" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-tmcdapne2-nhwy-alb-controller-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "iam:CreateServiceLinkedRole"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "iam:AWSServiceName" = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeAccountAttributes",
                          [32m+[0m[0m "ec2:DescribeAddresses",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DescribeInternetGateways",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeVpcPeeringConnections",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:GetCoipPoolUsage",
                          [32m+[0m[0m "ec2:DescribeCoipPools",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancers",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListeners",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:DescribeSSLPolicies",
                          [32m+[0m[0m "elasticloadbalancing:DescribeRules",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroups",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetHealth",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-idp:DescribeUserPoolClient",
                          [32m+[0m[0m "acm:ListCertificates",
                          [32m+[0m[0m "acm:DescribeCertificate",
                          [32m+[0m[0m "iam:ListServerCertificates",
                          [32m+[0m[0m "iam:GetServerCertificate",
                          [32m+[0m[0m "waf-regional:GetWebACL",
                          [32m+[0m[0m "waf-regional:GetWebACLForResource",
                          [32m+[0m[0m "waf-regional:AssociateWebACL",
                          [32m+[0m[0m "waf-regional:DisassociateWebACL",
                          [32m+[0m[0m "wafv2:GetWebACL",
                          [32m+[0m[0m "wafv2:GetWebACLForResource",
                          [32m+[0m[0m "wafv2:AssociateWebACL",
                          [32m+[0m[0m "wafv2:DisassociateWebACL",
                          [32m+[0m[0m "shield:GetSubscriptionState",
                          [32m+[0m[0m "shield:DescribeProtection",
                          [32m+[0m[0m "shield:CreateProtection",
                          [32m+[0m[0m "shield:DeleteProtection",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = "CreateSecurityGroup"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                          [32m+[0m[0m "ec2:DeleteTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:DeleteSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "elasticloadbalancing:DeleteListener",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:DeleteRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "elasticloadbalancing:CreateAction" = [
                                  [32m+[0m[0m "CreateTargetGroup",
                                  [32m+[0m[0m "CreateLoadBalancer",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:SetIpAddressType",
                          [32m+[0m[0m "elasticloadbalancing:SetSecurityGroups",
                          [32m+[0m[0m "elasticloadbalancing:SetSubnets",
                          [32m+[0m[0m "elasticloadbalancing:DeleteLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DeleteTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:RegisterTargets",
                          [32m+[0m[0m "elasticloadbalancing:DeregisterTargets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:SetWebAcl",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListener",
                          [32m+[0m[0m "elasticloadbalancing:AddListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:RemoveListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:ModifyRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.aws_node_termination_handler[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "aws_node_termination_handler" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-tmcdapne2-nhwy-aws-node-termination-handler-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "autoscaling:CompleteLifecycleAction",
                          [32m+[0m[0m "autoscaling:DescribeAutoScalingInstances",
                          [32m+[0m[0m "autoscaling:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.aws_node_termination_handler_fis[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "aws_node_termination_handler_fis" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "For FIS with Note Termination Handler"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-tmcdapne2-nhwy-aws-node-termination-handler-fis-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:SendSpotInstanceInterruptions",
                          [32m+[0m[0m "ec2:TerminateInstances",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:ec2:*:066346343248:instance/*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "external_secrets" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-tmcdapne2-nhwy-external-secrets"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:GetPublicKey",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ListKeyPolicies",
                          [32m+[0m[0m "kms:ListRetirableGrants",
                          [32m+[0m[0m "kms:GetKeyPolicy",
                          [32m+[0m[0m "kms:ListResourceTags",
                          [32m+[0m[0m "kms:ListGrants",
                          [32m+[0m[0m "kms:GetParametersForImport",
                          [32m+[0m[0m "kms:DescribeCustomKeyStores",
                          [32m+[0m[0m "kms:ListKeys",
                          [32m+[0m[0m "kms:GetKeyRotationStatus",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:ListAliases",
                          [32m+[0m[0m "kms:DescribeKey",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m "ForAllValues:StringEquals" = {
                              [32m+[0m[0m "aws:ResourceTag/kubernetes.io/cluster/tmcdapne2-nhwy" = [
                                  [32m+[0m[0m "owned",
                                  [32m+[0m[0m "shared",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ssm:GetParameterHistory",
                          [32m+[0m[0m "ssm:GetParameters",
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:DescribeParameters",
                          [32m+[0m[0m "ssm:GetParametersByPath",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m "ForAllValues:StringEquals" = {
                              [32m+[0m[0m "aws:ResourceTag/kubernetes.io/cluster/tmcdapne2-nhwy" = [
                                  [32m+[0m[0m "owned",
                                  [32m+[0m[0m "shared",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "secretsmanager:ListSecrets",
                          [32m+[0m[0m "secretsmanager:GetResourcePolicy",
                          [32m+[0m[0m "secretsmanager:GetSecretValue",
                          [32m+[0m[0m "secretsmanager:DescribeSecret",
                          [32m+[0m[0m "secretsmanager:ListSecretVersionIds",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m "ForAllValues:StringEquals" = {
                              [32m+[0m[0m "aws:ResourceTag/kubernetes.io/cluster/tmcdapne2-nhwy" = [
                                  [32m+[0m[0m "owned",
                                  [32m+[0m[0m "shared",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.karpenter_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "karpenter_controller" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-tmcdapne2-nhwy-karpenter-controller-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "iam:PassRole",
                          [32m+[0m[0m "ec2:DescribeImages",
                          [32m+[0m[0m "ec2:RunInstances",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeLaunchTemplates",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeInstanceTypes",
                          [32m+[0m[0m "ec2:DescribeInstanceTypeOfferings",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DeleteLaunchTemplate",
                          [32m+[0m[0m "ec2:CreateTags",
                          [32m+[0m[0m "ec2:CreateLaunchTemplate",
                          [32m+[0m[0m "ec2:CreateFleet",
                          [32m+[0m[0m "ec2:DescribeSpotPriceHistory",
                          [32m+[0m[0m "pricing:GetProducts",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "Karpenter"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:TerminateInstances"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/Name" = "*karpenter*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "ConditionalEC2Termination"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.route53[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "route53" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-tmcdapne2-nhwy-route53"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ChangeResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:route53:::hostedzone/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ListHostedZones",
                          [32m+[0m[0m "route53:ListResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "*",
                        ]
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.eks.aws_iam_role.alb_controller_assumerole[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "alb_controller_assumerole" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-alb-controller"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.aws_node_termination_handler[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "aws_node_termination_handler" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-aws-node-termination-handler"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.aws_node_termination_handler_fis[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "aws_node_termination_handler_fis" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "fis.amazonaws.com",
                            ]
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-aws-node-termination-handler-fis-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.cni_irsa_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "cni_irsa_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "CNI plugin role for EKS cluster tmcdapne2-nhwy"
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-cni-plugin"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "Allows access to other AWS service resources that are required to operate clusters managed by EKS."
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.eks_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_node_group" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "Allows EC2 instances to call AWS services on your behalf."
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-ng"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "external_dns" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-external-dns"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "external_secrets" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-external-secrets"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.karpenter_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "karpenter_controller" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-tmcdapne2-nhwy-karpenter-controller"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.alb_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "alb_controller" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-alb-controller"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.aws_node_termination_handler[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "aws_node_termination_handler" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-aws-node-termination-handler"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.aws_node_termination_handler_fis[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "aws_node_termination_handler_fis" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-aws-node-termination-handler-fis-role"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cni_irsa_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cni_irsa_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-cni-plugin"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_cluster_AmazonEKSClusterPolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cluster_AmazonEKSClusterPolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_cluster_AmazonEKSVPCResourceController[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cluster_AmazonEKSVPCResourceController" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_node_AmazonEBSCSIDriverPolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_AmazonEBSCSIDriverPolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-ng"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_node_AmazonEC2ContainerRegistryReadOnly[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_AmazonEC2ContainerRegistryReadOnly" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-ng"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_node_AmazonEKSWorkerNodePolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_AmazonEKSWorkerNodePolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-ng"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_node_AmazonEKS_CNI_Policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_AmazonEKS_CNI_Policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-ng"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.eks_node_AmazonSSMManagedInstanceCore[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_AmazonSSMManagedInstanceCore" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-ng"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.external_dns_route53[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "external_dns_route53" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-external-dns"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.external_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "external_secrets" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-external-secrets"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.karpenter_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "karpenter_controller" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-tmcdapne2-nhwy-karpenter-controller"
    }

[1m  # module.eks.aws_launch_template.eks_node_group[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "eks_node_group" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m default_version = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m latest_version  = (known after apply)
      [32m+[0m[0m name            = "tmcdapne2-nhwy-node-launch-template"
      [32m+[0m[0m name_prefix     = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)

      [32m+[0m[0m block_device_mappings {
          [32m+[0m[0m device_name = "/dev/xvda"

          [32m+[0m[0m ebs {
              [32m+[0m[0m delete_on_termination = "true"
              [32m+[0m[0m encrypted             = "true"
              [32m+[0m[0m iops                  = 3000
              [32m+[0m[0m kms_key_id            = "arn:aws:kms:ap-northeast-2:066346343248:alias/aws/ebs"
              [32m+[0m[0m throughput            = 125
              [32m+[0m[0m volume_size           = 30
              [32m+[0m[0m volume_type           = "gp3"
            }
        }

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "optional"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }
    }

[1m  # module.eks.aws_security_group.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Cluster communication with Worker Nodes"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.10.0.0/16",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.112.0.0/16",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = true
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = "eks-tmcdapne2-nhwy-cluster-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                 = "eks-tmcdapne2-nhwy-cluster-sg"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                 = "eks-tmcdapne2-nhwy-cluster-sg"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m vpc_id                 = "vpc-02bd27f3ad9337b18"
    }

[1m  # module.eks.aws_security_group.eks_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_node_group" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for node group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "eks-tmcdapne2-nhwy-ng"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                 = "eks-tmcdapne2-nhwy-ng"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                 = "eks-tmcdapne2-nhwy-ng"
          [32m+[0m[0m "account"                              = "id"
          [32m+[0m[0m "aws_region"                           = "ap-northeast-2"
          [32m+[0m[0m "kubernetes.io/cluster/tmcdapne2-nhwy" = "owned"
          [32m+[0m[0m "product"                              = "tmc"
          [32m+[0m[0m "shard_id"                             = "tmcdapne2"
        }
      [32m+[0m[0m vpc_id                 = "vpc-02bd27f3ad9337b18"
    }

[1m  # module.eks.aws_sqs_queue.aws_node_termination_handler_queue[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "aws_node_termination_handler_queue" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = (known after apply)
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 43200
      [32m+[0m[0m name                              = "tmcdapne2-nhwy-aws-node-termination-handler-queue"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 0
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m sqs_managed_sse_enabled           = true
      [32m+[0m[0m tags                              = {
          [32m+[0m[0m "Name"       = "tmcdapne2-nhwy-aws-node-termination-handler-queue"
          [32m+[0m[0m "account"    = "id"
          [32m+[0m[0m "aws_region" = "ap-northeast-2"
          [32m+[0m[0m "product"    = "tmc"
          [32m+[0m[0m "shard_id"   = "tmcdapne2"
        }
      [32m+[0m[0m tags_all                          = {
          [32m+[0m[0m "Name"       = "tmcdapne2-nhwy-aws-node-termination-handler-queue"
          [32m+[0m[0m "account"    = "id"
          [32m+[0m[0m "aws_region" = "ap-northeast-2"
          [32m+[0m[0m "product"    = "tmc"
          [32m+[0m[0m "shard_id"   = "tmcdapne2"
        }
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 30
    }

[1m  # module.eks.aws_sqs_queue_policy.aws_node_termination_handler_queue[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue_policy" "aws_node_termination_handler_queue" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m policy    = (known after apply)
      [32m+[0m[0m queue_url = (known after apply)
    }

[1m  # module.eks.kubernetes_cluster_role_binding.viewers[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_cluster_role_binding" "viewers" {
      [32m+[0m[0m id = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "viewers"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m role_ref {
          [32m+[0m[0m api_group = "rbac.authorization.k8s.io"
          [32m+[0m[0m kind      = "ClusterRole"
          [32m+[0m[0m name      = "view"
        }

      [32m+[0m[0m subject {
          [32m+[0m[0m api_group = "rbac.authorization.k8s.io"
          [32m+[0m[0m kind      = "Group"
          [32m+[0m[0m name      = "viewers"
          [32m+[0m[0m namespace = "-"
        }
    }

[1m  # module.eks.kubernetes_config_map.aws_auth[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_config_map" "aws_auth" {
      [32m+[0m[0m data = (known after apply)
      [32m+[0m[0m id   = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "aws-auth"
          [32m+[0m[0m namespace        = "kube-system"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1mPlan:[0m 57 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aws_iam_openid_connect_provider_arn       = (known after apply)
  [32m+[0m[0m aws_iam_openid_connect_provider_url       = (known after apply)
  [32m+[0m[0m aws_security_group_eks_cluster_default_id = (known after apply)
  [32m+[0m[0m aws_security_group_eks_cluster_id         = (known after apply)
  [32m+[0m[0m aws_security_group_eks_node_group_id      = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
